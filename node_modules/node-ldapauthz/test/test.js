const LDAP_PORT = 1389;

const LDAP_URL = 'ldap://localhost:' + LDAP_PORT;

var LdapAuthz = require('../lib/index.js');

var ldapserver = require('./ldapserver.js');

var assert = require('assert-plus');

describe("ldapauthz", function() {

  before(function(done) {
    ldapserver.start(LDAP_PORT, function() {
      done();
    });
  });

  after(function(done) {
    ldapserver.close(function() {
      done();
    });
  });

  it("should return an NoSuchObjectError when the object does not exist", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=non-existent,ou=people,dc=example,dc=com',
      adminPassword: 'secret',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('user1', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err.name, 'NoSuchObjectError');
      done();
    });
  });

  it("should return an InvalidCredentialsError when the credentials are invalid", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=root,ou=people,dc=example,dc=com',
      adminPassword: 'invalid',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('user1', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err.name, 'InvalidCredentialsError');
      done();
    });
  });

  it("should return an empty authorities list when no such user is found", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=root,ou=people,dc=example,dc=com',
      adminPassword: 'secret',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('non-existent-user', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err, undefined);
      assert.deepEqual(authorities, []);
      done();
    });
  });

  it("should return an empty authorities list when the user has no permissions", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=root,ou=people,dc=example,dc=com',
      adminPassword: 'secret',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('user1', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err, undefined);
      assert.deepEqual(authorities, []);
      done();
    });
  });

  it("should return the user authority", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=root,ou=people,dc=example,dc=com',
      adminPassword: 'secret',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('user2', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err, undefined);
      assert.deepEqual(authorities, ['users']);
      done();
    });
  });

  it("should return all user authorities", function(done) {
    var authz = new LdapAuthz({
      url: LDAP_URL,
      adminDn: 'cn=root,ou=people,dc=example,dc=com',
      adminPassword: 'secret',
      groupSearchBase: 'ou=groups,dc=example,dc=com',
    });

    authz.getGrantedAuthorities('user3', function (err, authorities) {
      authz.close(function (err) {});

      assert.equal(err, undefined);
      assert.deepEqual(authorities, ['users', 'administrators']);
      done();
    });
  });

});
