var ldap = require('ldapjs');

var server = null;

var groups = {
  'users': {
    'dn': 'cn=users,ou=groups,dc=example,dc=com',
    attributes: {
      'cn': 'users',
      'objectclass': 'groupOfUniqueNames',
      'uniqueMember': 'cn=user2,ou=people,dc=example,dc=com',
      'uniqueMember': 'cn=user3,ou=people,dc=example,dc=com'
    }
  },

  'administrators': {
    'dn': 'cn=administrators,ou=groups,dc=example,dc=com',
    attributes: {
      'cn': 'administrators',
      'objectclass': 'groupOfUniqueNames',
      'uniqueMember': 'cn=user3,ou=people,dc=example,dc=com'
    }
  }
};

var authorize = function(req, res, next) {
  return next();
};

exports.start = function(port, cb) {
  if (server) {
    if (typeof cb === 'function') {
      return cb();
    }
    return;
  }

  server = ldap.createServer();

  server.bind('cn=root,ou=people,dc=example,dc=com', function(req, res, next) {
    if ((req.dn.toString() !== 'cn=root,ou=people,dc=example,dc=com')
        || (req.credentials !== 'secret')) {
      return next(new ldap.InvalidCredentialsError());
    }
    res.end();
    return next();
  });

  server.search('ou=groups,dc=example,dc=com', authorize, function(req, res, next) {
    switch (req.filter.value) {
      case 'user1':
        break;

      case 'user2':
        res.send(groups['users']);
        break;

      case 'user3':
        res.send(groups['users']);
        res.send(groups['administrators']);
        break;
    }

    res.end();
    return next();
  });

  server.listen(port, function() {
    if (typeof cb === 'function') {
      return cb();
    }
  });
};

exports.close = function(cb) {
  if (server) {
    server.close();
    server = null;
  }

  if (typeof cb === 'function') {
    return cb();
  }

  return;
};

