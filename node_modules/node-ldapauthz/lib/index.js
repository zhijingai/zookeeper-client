/**
 * index.js
 *
 * Usage:
 *    var LdapAuthz = require('ldapauthz');
 *    var authz = new LdapAuthz({url: 'ldaps://ldap.example.com:663', ...});
 *    ...
 *    authz.getGrantedAuthorities(username, function (err, authorities) { ... });
 *    ...
 *    authz.close(function (err) { ... }) 
 */
var ldap = require('ldapjs');
var assert = require('assert-plus');

/**
 * Creates an LDAP authz class.
 *
 * @param opts {Object} Config options.
 *   url {String} A valid LDAP url. E.g. 'ldaps://ldap.example.com:663'
 *   adminDn {String} Optional, e.g. 'uid=myapp,ou=users,o=example.com'
 *   adminPassword {String} Password for adminDn.
 *   groupSearchBase {String} Defines the part of the directory tree under
 *     which group searches should be performed.
 *     E.g. 'ou=groups,o=example.com'
 *   groupSearchScope {String} Optional, default 'sub'. Scope of the search,
 *     one of 'base', 'one', or 'sub'.
 *   groupSearchFilter {String} The filter which is used to search for group
 *     membership. Use the literal '{{username}}' to have the given username
 *     be interpolated in for the LDAP search.
 *     The default is (uniqueMember={{username}}), corresponding to the
 *     groupOfUniqueMembers LDAP class.
 *   groupRoleAttribute {String} The attribute which contains the name of the
 *     authority defined by the group entry. Defaults to cn.
 *   log4js {Module} Optional. The require'd log4js module to use for logging.
 *     If given this will result in TRACE-level logging for ldapauthz.
 *   verbose {Boolean} Optional, default false. If `log4js` is also given,
 *     this will add TRACE-level logging for ldapjs (quite verbose).
 *   timeout {Integer} Optional, default Infinity. How long the client should
 *     let operations live for before timing out.
 *   connectTimeout {Integer} Optional, default is up to the OS. How long the
 *     client should wait before timing out on TCP connections.
 *   tlsOptions {Object} Additional options passed to the TLS connection layer
 *     when connecting via ldaps://. See
 *     http://nodejs.org/api/tls.html#tls_tls_connect_options_callback
 *     for available options
 *   maxConnections {Integer}
 *     Whether or not to enable connection pooling, and if so, how many to
 *     maintain.
 *   bindDN {String} The DN all connections should be bound as.
 *     Defaults to adminDn.
 *   bindCredentials {String} The credentials to use with bindDN.
 *     Defaults to adminPassword
 *   checkInterval {Integer}
 *     How often to schedule health checks for the connection pool.
 *   maxIdleTime {Integer}
 *     How long a client can be idle before health-checking the connection
 *     (subject to the checkInterval frequency)
 */
function LdapAuthz(opts) {
  assert.ok(opts.url);
  assert.ok(opts.groupSearchBase);

  this._opts = opts;
  this._opts.groupSearchScope || (this._opts.groupSearchScope = 'sub');
  this._opts.groupSearchFilter || (this._opts.groupSearchFilter = '(uniqueMember={{username}})');
  this._opts.groupRoleAttribute || (this._opts.groupRoleAttribute = 'cn');

  this._log = opts.log4js && opts.log4js.getLogger('ldapauthz');

  var clientOpts = {
    url: opts.url,
    connectTimeout: opts.connectTimeout,
    timeout: opts.timeout,
    tlsOptions: opts.tlsOptions,
    maxConnections: opts.maxConnections,
    bindDn: opts.bindDn || opts.adminDn,
    bindCredentials: opts.Credentials || opts.adminPassword,
    checkInterval: opts.checkInterval,
    maxIdleTime: opts.maxIdleTime
  };

  if (opts.log4js && opts.verbose) {
    clientOpts.log4js = opts.log4js;
  }

  // Creates a new LDAP client
  this._adminClient = ldap.createClient(clientOpts);
  this._adminBound = false;
}

/**
 * Closes the LDAP client.
 *
 * @param callback {Function} `function (err)` The callback function.
 */
LdapAuthz.prototype.close = function (callback) {
  // Performs an unbind operation against the LDAP server
  this._adminClient.unbind(callback);
}

/**
 * Performs a bind operation against the LDAP server
 *
 * @param callback {Function} `function (err)` The callback function.
 */
LdapAuthz.prototype._adminBind = function (callback) {
  var self = this;

  // Anonymous binding
  if (typeof self._opts.adminDn === 'undefined' || self._opts.adminDn === null) {
    return callback();
  }

  if (self._adminBound) {
    return callback();
  }

  self._adminClient.bind(self._opts.adminDn, self._opts.adminPassword, function (err) {
    if (err) {
      self._log && self._log.trace('ldap bind error: %s', err);
      return callback(err);
    }

    self._adminBound = true;
    return callback();
  });
}

/**
 * Gets the list of authorities for the user.
 *
 * @param username {String} The user name.
 * @param callback {Function} `function (err, authorities)` The callback function.
 */
LdapAuthz.prototype.getGrantedAuthorities = function (username, callback) {
  if (!username) {
    return callback("empty username");
  }

  var self = this;

  self._adminBind(function (err) {
    if (err) {
      return callback(err);
    }

    var groupSearchFilter = self._opts.groupSearchFilter.replace(/{{username}}/g, username);

    var opts = {
      filter: groupSearchFilter,
      scope: self._opts.groupSearchScope,
      attributes: [ self._opts.groupRoleAttribute ]
    };

    self._adminClient.search(self._opts.groupSearchBase, opts, function (err, result) {
      if (err) {
        self._log && self._log.trace('ldap search error: %s %s %s', err.code, err.name, err.message);
        return callback(err);
      }

      var authorities = [];
      
      result.on('searchEntry', function (entry) {
        authorities.push(entry.object[self._opts.groupRoleAttribute]);
      });

      result.on('error', function (err) {
        self._log && self._log.trace('ldap search error event: %s %s %s', err.code, err.name, err.message);
        return callback(err);
      });

      result.on('end', function (result) {
        if (result.status !== 0) {
          var err = 'non-zero status from LDAP search: ' + result.status;
          self._log && self._log.trace(err);
          return callback(err);
        }

        return callback(null, authorities);
      });
    });
  });
}

module.exports = LdapAuthz;
